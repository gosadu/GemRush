**STAGE 11: POLISH, ART, & SOUND FINAL PASS**  
*(All orchard expansions synergy references, forging synergy combos usage, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks, incremental tutorials hooking, swirl transitions, layered audio, sublocation logic, hero synergy usage are now fully polished with final VFX, UI, audio, and no placeholders.)*

---

## **GAME DESIGNER PERSPECTIVE**  

1. **Top-Tier Polish & Visual Cohesion**  
   - This stage prioritizes final painterly or subtle anime art, swirl transitions, synergy swirl VFX, consistent fonts, and corner rounding across orchard expansions, forging synergy combos, puzzle-combat, incremental tutorials, daily tasks, and netcode guild screens.  
   - The orchard expansions synergy logic or forging synergy combos usage remain identical in function but now fully reflect final visuals.  
   - Ensuring each synergy highlight (e.g., forging synergy combos for 5+ gem matches) uses a swirl or subtle anime line flourish, reinforcing the sense of arcane or garden-themed magic.

2. **Audio Layering & Immersion**  
   - Adding layered music transitions for orchard expansions (soft, whimsical track), forging synergy combos workshop (slightly more percussive or mechanical track), puzzle-combat (energetic, with combo layering for big matches), and guild co-op (communal, heroic theme).  
   - SFX: orchard minigame swipes, forging hammer clangs, synergy swirl sparkles, swirl transitions. The polish ensures each synergy step is accompanied by a short, memorable sound.

3. **UX Consistency & Brand Identity**  
   - The final stage aims to unify color palettes, fonts, icon shapes, button corners, transitions, and subtle anime outlines so the entire app, from orchard expansions synergy gating to forging synergy combos, puzzle sublocation nodes, netcode cameo usage, daily tasks, incremental tutorials hooking, swirl transitions, layered audio, all share the same “storybook” or “fantasy orchard” aesthetic.  
   - This is crucial for a 10/10 user impression.

4. **Narrative Elements**  
   - If there’s a story around orchard expansions or forging synergy combos, stage 11 can add the last bits of flavor text or subtle animations (like forging sparks or orchard “petals” drifting).  
   - Each synergy point (orchard≥Tier gating or forging≥Arcane synergy usage) might get a short line of narrative to deepen the “magical orchard forging” vibe.

---

## **QA ENGINEER PERSPECTIVE**

1. **Testing Transitions & VFX**  
   - Ensure swirl transitions or fade overlays do not cause UI soft-locks or performance hitches on lower-end devices. Possibly test iOS, Android mid-range phones for memory usage.  
   - Confirm synergy swirl VFX or orchard expansions synergy visuals do not obscure gameplay elements.  

2. **Audio Balancing**  
   - Volume levels must remain consistent across orchard expansions, forging synergy combos puzzle, netcode cameo cameo usage, daily tasks claims, etc.  
   - Check memory usage if we load large audio files. Possibly stream or compress them.  

3. **UI Consistency Tests**  
   - Automated or manual test for misaligned or leftover placeholder art. Confirm the final painterly backgrounds are used in orchard expansions, forging workshop, puzzle sublocations, netcode guild screens, daily tasks UI, incremental tutorial pop-ups.  
   - No mismatch in fonts or text overlaps from smaller device resolutions (e.g., 16:9 → 18:9 → tablets).

4. **Performance & Crash Avoidance**  
   - Thorough checks on older devices. The synergy swirl VFX or orchard expansions swirl transitions might be GPU-intensive if not optimized.  
   - Test memory usage if orchard expansions synergy gating triggers large art, forging synergy combos triggers many particle effects, swirl transitions happen frequently.  

5. **No Placeholders**  
   - Inspect each manager or script for references like “temp.png,” “placeholder.ogg,” or “WIP_Asset.” All must be replaced with final assets or removed.  
   - Confirm orchard expansions synergy gating, forging synergy combos usage, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks, incremental tutorials hooking are properly referencing final art, SFX, and swirl transitions.

---

## **STAGE 11: STEP-BY-STEP PLAN**

1. **Replace Placeholder Art with Final Painterly/Subtle Anime Assets**  
   1) For orchard expansions: orchard panel background, orchard minigame sprites, orchard district icons.  
   2) For forging synergy combos: forging item icons, forging puzzle backgrounds, forging success swirl VFX.  
   3) For puzzle sublocations: minion/boss sprites, painterly backdrops, synergy swirl combos for 5+ gem matches.  
   4) For netcode cameo cameo usage or daily tasks: final UI icons, final swirling effect for synergy tasks.  

2. **Swirl or Fade Scene Transitions**  
   1) If a new `SceneTransitionManager.cs` is introduced (see code below), unify orchard expansions panel open/close, forging workshop open/close, puzzle scene transitions, netcode guild screens, daily tasks panel transitions.  
   2) This swirl or fade overlay is anchored full screen with subtle anime lines or orchard swirl motifs.

3. **Enhanced Audio & Music Layers**  
   1) In `SoundManager.cs`, load final orchard music, forging synergy combos workshop track, puzzle-combat track, guild track, daily tasks stinger.  
   2) Add synergy swirl SFX for orchard≥Tier synergy triggers or forging≥Arcane synergy triggers (≥5 gem matches).  
   3) Possibly use a second audio source for “combo layer” track that fades in during big puzzle combos or forging synergy combos success.

4. **Final Particle FX or Subtle Anime Lines**  
   1) orchard expansions synergy combos in orchard minigames might have a final swirl or spark overlay. forging synergy combos might spawn subtle anime lines or swirling embers on success.  
   2) puzzle-combat synergy swirl: spawn synergy swirl or partial swirl if orchard≥Tier synergy or forging≥Arcane synergy triggers.  
   3) For boss defeat, spawn a swirl or “victory glow.”

5. **UI Consistency & Final Font**  
   1) Choose a final, legible fantasy or subtle anime typeface for orchard expansions panels, forging workshop, puzzle sublocation UIs, netcode guild screens, daily tasks panels, incremental tutorial overlays.  
   2) Round corners, unify button shapes, remove leftover placeholders. Possibly adopt a gentle orchard swirl border or forging swirl motif around UI panels.

6. **Animation Curves & Speed**  
   1) In `ArcSwapEffect.cs`, if gem arcs are slow (0.4s), reduce to 0.3s or add an “EaseInOutCubic” function for a snappier feel. orchard expansions minigames might add bounce or spark animations. forging synergy combos success could have an extended swirl or glow.  
   2) Ensure performance remains stable on mid-range devices.

7. **Verify Final Pacing**  
   1) Conduct a final run-through: orchard expansions synergy gating from Tier1→Tier3, forging synergy combos usage, puzzle sublocation minions/bosses, netcode cameo cameo usage, daily tasks, incremental tutorials hooking.  
   2) Confirm synergy swirl transitions or layered audio do not cause overhead. No placeholders remain.

---

## **STAGE 11: CODE RECAP**  

Below we show any *new or updated* scripts introduced for the final polish. Scripts from Stage 10 remain the same unless replaced below.

### **A) `SceneTransitionManager.cs` (NEW)**

```csharp
/*************************************************************
 * SceneTransitionManager.cs (STAGE 11, NEW)
 * Handles swirl-based or fade-based transitions across orchard,
 * forging, puzzle, netcode, daily tasks, synergy combos, etc.
 *************************************************************/
using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public class SceneTransitionManager : MonoBehaviour
{
    public static SceneTransitionManager Instance;

    [Header("Transition Overlay")]
    [SerializeField] private Image swirlOverlayImage;
    [SerializeField] private float swirlDuration = 1.0f;
    [SerializeField] private AnimationCurve swirlCurve;

    private void Awake()
    {
        if (Instance == null) Instance = this;
        else Destroy(gameObject);

        DontDestroyOnLoad(this.gameObject);

        if (swirlOverlayImage)
        {
            swirlOverlayImage.gameObject.SetActive(false);
            Color c = swirlOverlayImage.color;
            c.a = 0f;
            swirlOverlayImage.color = c;
        }
    }

    public void DoSwirlTransition(System.Action onComplete = null)
    {
        StartCoroutine(SwirlRoutine(onComplete));
    }

    private IEnumerator SwirlRoutine(System.Action onComplete)
    {
        if (!swirlOverlayImage) yield break;
        swirlOverlayImage.gameObject.SetActive(true);

        float time = 0f;
        while (time < swirlDuration)
        {
            time += Time.deltaTime;
            float t = time / swirlDuration;
            float alpha = swirlCurve.Evaluate(t);
            Color c = swirlOverlayImage.color;
            c.a = alpha;
            swirlOverlayImage.color = c;
            yield return null;
        }

        onComplete?.Invoke();

        // Fade out swirl
        time = 0f;
        while (time < swirlDuration)
        {
            time += Time.deltaTime;
            float t = time / swirlDuration;
            float alpha = swirlCurve.Evaluate(1f - t);
            Color c = swirlOverlayImage.color;
            c.a = alpha;
            swirlOverlayImage.color = c;
            yield return null;
        }

        swirlOverlayImage.gameObject.SetActive(false);
    }
}
```
**Usage**:  
- Place `SceneTransitionManager` in `Assets/Scripts/UI/` or `Assets/Scripts/Managers/`.  
- In the main scene (e.g., “MainGame” scene or root), add a `SceneTransitionManager` GameObject with the script. Link `swirlOverlayImage` to a full-screen `Image` with a swirl overlay sprite.  
- In orchard expansions panel open/close, forging workshop transitions, puzzle scene load, netcode guild screens, daily tasks panel transitions, call:
  ```csharp
  SceneTransitionManager.Instance?.DoSwirlTransition(() => { 
      // some callback if needed
  });
  ```

---

### **B) `SoundManager.cs` (UPDATED)**  
*(Now references orchard expansions music, forging combos music, puzzle track, synergy swirl SFX, no placeholders remain.)*

```csharp
/*************************************************************
 * SoundManager.cs (STAGE 11, UPDATED)
 * Final layering for orchard expansions synergy combos music,
 * forging synergy combos, puzzle combos, netcode cameo usage, etc.
 *************************************************************/
using UnityEngine;

public class SoundManager : MonoBehaviour
{
    [Header("Audio Sources")]
    public AudioSource sfxSource;
    public AudioSource musicSource;

    [Header("Music Clips")]
    public AudioClip orchardMusic;
    public AudioClip forgingMusic;
    public AudioClip puzzleMusic;
    public AudioClip guildMusic;  // netcode cameo or guild co-op

    [Header("SFX Clips")]
    public AudioClip matchClip;
    public AudioClip swapClip;
    public AudioClip forgingSuccessClip;
    public AudioClip orchardCollectClip;
    public AudioClip synergySwirlClip; // swirl SFX on orchard≥Tier or forging≥Arcane combos

    [Header("Combo Layering")]
    public AudioSource comboLayerSource;
    public AudioClip comboLayerClip; // puzzle combos

    private void Start()
    {
        if (musicSource)
        {
            musicSource.loop = true;
            musicSource.Play(); // possibly play a default or orchard track
        }
    }

    public void PlayOrchardMusic()
    {
        if (musicSource && orchardMusic)
        {
            musicSource.clip = orchardMusic;
            musicSource.Play();
        }
    }

    public void PlayForgingMusic()
    {
        if (musicSource && forgingMusic)
        {
            musicSource.clip = forgingMusic;
            musicSource.Play();
        }
    }

    public void PlayPuzzleMusic()
    {
        if (musicSource && puzzleMusic)
        {
            musicSource.clip = puzzleMusic;
            musicSource.Play();
        }
    }

    public void PlayGuildMusic()
    {
        if (musicSource && guildMusic)
        {
            musicSource.clip = guildMusic;
            musicSource.Play();
        }
    }

    public void PlayMatchSound()
    {
        if (sfxSource && matchClip) sfxSource.PlayOneShot(matchClip);
    }

    public void PlaySwapSound()
    {
        if (sfxSource && swapClip) sfxSource.PlayOneShot(swapClip);
    }

    public void PlayForgingSuccess()
    {
        if (sfxSource && forgingSuccessClip) sfxSource.PlayOneShot(forgingSuccessClip);
    }

    public void PlayOrchardCollect()
    {
        if (sfxSource && orchardCollectClip) sfxSource.PlayOneShot(orchardCollectClip);
    }

    public void PlaySynergySwirl()
    {
        if (sfxSource && synergySwirlClip) sfxSource.PlayOneShot(synergySwirlClip);
    }

    public void StartComboLayer()
    {
        if (comboLayerSource && comboLayerClip)
        {
            comboLayerSource.clip = comboLayerClip;
            comboLayerSource.loop = true;
            comboLayerSource.volume = 0.7f;
            comboLayerSource.Play();
        }
    }

    public void StopComboLayer()
    {
        if (comboLayerSource && comboLayerSource.isPlaying)
        {
            comboLayerSource.Stop();
        }
    }
}
```
**Usage**:  
- For orchard expansions synergy combos or forging synergy combos triggers, call `PlaySynergySwirl()`.  
- For orchard expansions panel, forging workshop, puzzle sublocation, or netcode guild screens, call the relevant “PlayOrchardMusic(), PlayForgingMusic(), etc.”  

---

### **C) `AnimationSystem.cs` (UPDATED)**  
*(Adds synergy swirl or orchard swirl references, partial anime lines, no placeholders remain.)*

```csharp
/*************************************************************
 * AnimationSystem.cs (STAGE 11, UPDATED)
 * Final synergy swirl or orchard swirl effects on 5+ matches,
 * orchard expansions minigames, forging synergy combos success, etc.
 *************************************************************/
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;

public class AnimationSystem : MonoBehaviour
{
    public float vanishDuration = 0.3f;
    public GameObject gemShatterPrefab;
    public GameObject shockwavePrefab;

    [Header("Optional VFX for synergy combos")]
    public GameObject synergySwirlPrefab; // final orchard synergy or forging synergy swirl

    public void AnimateGemRemoval(List<GemData> gemsToRemove, GemData[,] board, EnhancedBoardManager boardMgr)
    {
        StartCoroutine(DoFancyRemoval(gemsToRemove, board, boardMgr));
    }

    private IEnumerator DoFancyRemoval(List<GemData> gemsToRemove, GemData[,] board, EnhancedBoardManager boardMgr)
    {
        // gather references
        List<GemView> gemViews = new List<GemView>();
        GemView[] allGems = FindObjectsOfType<GemView>();
        foreach (var gv in allGems)
        {
            if (gv && gemsToRemove.Contains(gv.gemData)) gemViews.Add(gv);
        }

        // build up effect
        float buildUpDur = 0.25f;
        yield return StartCoroutine(BuildUpEffect(gemViews, buildUpDur));

        // vanish
        yield return StartCoroutine(ShatterAndFade(gemViews));

        // synergy swirl if large combo
        if (shockwavePrefab)
        {
            foreach (var gv in gemViews) 
                if (gv) Instantiate(shockwavePrefab, gv.transform.position, Quaternion.identity);
        }
        if (synergySwirlPrefab && gemViews.Count >= 5)
        {
            Vector3 avgPos = Vector3.zero;
            foreach (var gv in gemViews) avgPos += gv.transform.position;
            avgPos /= gemViews.Count;
            Instantiate(synergySwirlPrefab, avgPos, Quaternion.identity);

            // optional synergy swirl SFX
            var sm = FindObjectOfType<SoundManager>();
            if (sm) sm.PlaySynergySwirl();
        }

        // remove from board
        foreach (var gv in gemViews)
        {
            if (gv)
            {
                boardMgr.RemoveGem(gv.gemData);
                Destroy(gv.gameObject);
            }
        }
        boardMgr.RedrawBoard();
    }

    private IEnumerator BuildUpEffect(List<GemView> gemViews, float duration)
    {
        float time = 0f;
        while (time < duration)
        {
            time += Time.deltaTime;
            float t = time / duration;
            float scale = 1f + 0.2f * Mathf.Sin(t * Mathf.PI * 2f);
            foreach (var gv in gemViews)
            {
                if (gv) gv.transform.localScale = Vector3.one * scale;
            }
            yield return null;
        }
        foreach (var gv in gemViews)
        {
            if (gv) gv.transform.localScale = Vector3.one;
        }
    }

    private IEnumerator ShatterAndFade(List<GemView> gemViews)
    {
        float time = 0f;
        while (time < vanishDuration)
        {
            time += Time.deltaTime;
            float alpha = 1f - (time / vanishDuration);
            foreach (var gv in gemViews)
            {
                if (!gv) continue;
                Image img = gv.GetComponent<Image>();
                if (img)
                {
                    Color c = img.color;
                    c.a = alpha;
                    img.color = c;
                }
            }
            yield return null;
        }
        if (gemShatterPrefab)
        {
            foreach (var gv in gemViews)
            {
                if (gv) Instantiate(gemShatterPrefab, gv.transform.position, Quaternion.identity);
            }
        }
        yield return null;
    }
}
```
**Usage**:  
- Attach or assign `synergySwirlPrefab` for orchard expansions synergy swirl or forging synergy swirl, and any final shockwave/spell effect.  
- On big matches (≥5 gems), the synergy swirl spawns plus synergy swirl SFX triggers.

---

### **D) `EnhancedBoardManager.cs`, `OrchardManager.cs`, `ForgingManager.cs`, etc.**  
Remain the same from Stage 10 except we have:

- **No placeholders** for swirl transitions or partial synergy references.  
- Final orchard expansions synergy gating or forging synergy combos usage call out to `SceneTransitionManager.Instance?.DoSwirlTransition()` or `SoundManager.PlaySynergySwirl()`.  

*(Hence no new code snippet if functionality is identical to Stage 10 but with final art references in the Inspector.)*

---

## **CONCLUSION (STAGE 11)**  
Stage 11 applies the **final art & sound polish**—painterly or subtle anime backgrounds, swirl transitions, synergy swirl VFX, consistent fonts, layered audio, orchard expansions synergy gating visuals, forging synergy combos usage cues, puzzle sublocation highlights, netcode cameo cameo usage UI, daily tasks animations, incremental tutorial overlays. **No placeholders** remain, ensuring the entire puzzle-RPG exudes a top-tier polished feel and brand identity. The next step, Stage 12, finalizes QA testing, save/load validation, device builds, and publishing.