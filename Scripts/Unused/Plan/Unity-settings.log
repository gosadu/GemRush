**ULTIMATE VERBOSE UNITY INSTRUCTIONS FOR ALL 12 STAGES**  
Below is the **complete, expanded** final reference with top-level detail for setting up every script, asset, manager, UI element, orchard expansions synergy reference, forging synergy combos usage, puzzle-combat logic, incremental tutorials, daily tasks, netcode cameo cameo usage, swirl transitions, layered audio hooking, sublocation logic, hero synergy usage, and everything else. Each stage includes step-by-step Unity instructions, from project creation to final publishing, with no placeholders or partial stubs. No second-person references are used, ensuring purely declarative enumerations.

---

## **STAGE 1: PROJECT CREATION & INITIAL SCENE SETUP**

1. **Project Creation**  
   1) Launch Unity 2021 or later.  
   2) Select “Create New” → “3D” or “2D” (the puzzle-RPG can be 2D UI-based), name the project `PuzzleRPG`.  
   3) Navigate to `File > Build Settings` to confirm target platform (iOS/Android).  
   4) Ensure the default scene is “MainGame,” then save it as `MainGame.unity` in `Assets/Scenes`.

2. **Folders & Scripts**  
   1) In the Project window, create the following top-level folders:  
      - `Assets/Scripts`  
      - `Assets/Art`  
      - `Assets/Prefabs`  
      - `Assets/Data`  
      - `Assets/Audio`  
      - `Assets/Scenes`  
   2) Within `Assets/Scripts`, add subfolders: `Board`, `Managers`, `UI`, `PartySystem`, `Items`, `DailyRewards`, `WorldMap`.  
   3) Place or create the manager scripts in `Assets/Scripts/Managers` (e.g., `GameManager.cs`, `UIManager.cs`, `SoundManager.cs`, `ProgressionManager.cs`, `OrchardManager.cs`, `ForgingManager.cs`, `GuildManager.cs`, `LiveOpsManager.cs`, `DailyTasksManager.cs`, `MonetizationManager.cs`, `WorldMapManager.cs`, etc.).  
   4) In the Hierarchy of the “MainGame” scene, create empty GameObjects named:  
      - GameManager (attach `GameManager.cs`)  
      - UIManager (attach `UIManager.cs`)  
      - SoundManager (attach `SoundManager.cs`)  
      - ProgressionManager (attach `ProgressionManager.cs`)  
      - OrchardManager (attach `OrchardManager.cs`)  
      - ForgingManager (attach `ForgingManager.cs`)  
      - DailyTasksManager (attach `DailyTasksManager.cs`)  
      - GuildManager (attach `GuildManager.cs`)  
      - LiveOpsManager (attach `LiveOpsManager.cs`)  
      - MonetizationManager (attach `MonetizationManager.cs`)  
      - WorldMapManager (attach `WorldMapManager.cs`)  

3. **Canvas & Panels**  
   1) Right-click in the Hierarchy → `UI > Canvas`, rename the result “Canvas.”  
   2) In the Inspector, confirm the Canvas is in `Screen Space - Overlay` or `Screen Space - Camera` mode, depending on preference.  
   3) Attach a `CanvasScaler` component if auto-scaling is required (set reference resolution to 1920×1080, for instance).  
   4) Create empty child objects:  
      - “TopPanel” with an `Image` or `RectTransform` anchoring at the top.  
      - “CenterPanel” anchoring in the center.  
      - “BottomPanel” anchoring at the bottom.  
   5) If a “SafeArea” is needed, create a child “SafeAreaPanel” that adjusts for notched devices.

4. **Manager References**  
   1) In `GameManager.cs`, add public fields for the other managers if cross-communication is needed:

      ```csharp
      public UIManager uiManager;
      public SoundManager soundManager;
      public OrchardManager orchardManager;
      public ForgingManager forgingManager;
      ...
      ```

   2) In the Unity Inspector, assign each manager from the Hierarchy.  
   3) Ensure compile errors are resolved by referencing `using UnityEngine; using System.Collections.Generic;` in each script requiring `MonoBehaviour` or `List<>`. No placeholders remain. Orchard expansions synergy gating, forging synergy combos usage, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing synergy combos, incremental tutorials hooking, swirl transitions, layered audio hooking, sublocation logic, hero synergy usage are set to be implemented in later stages.

---

## **STAGE 2: PUZZLE COMBAT BOARD & SWAP MATCH LOGIC**

1. **EnhancedBoardManager**  
   1) In `Assets/Scripts/Board`, create or confirm existence of `EnhancedBoardManager.cs`, `ArcSwapEffect.cs`, `InvalidMoveFX.cs`, `BoardSettleFX.cs`, `AnimationSystem.cs`.  
   2) Create a GameObject “BoardManager” in the Hierarchy, attach `EnhancedBoardManager.cs`.  
   3) Set `rows=8`, `cols=8` in the Inspector, or other desired dimensions.  
   4) If `autoFitGems=true`, create a UI object under “CenterPanel” named “GemBoardContainer,” then assign that `RectTransform` to `gemBoardContainer`.

2. **GemViewPrefab**  
   1) Under `Assets/Prefabs/Gems`, right-click → Create → Prefab, name it “GemViewPrefab.”  
   2) Drag an empty GameObject from Hierarchy into that prefab.  
   3) On this prefab root, add an `Image` component.  
   4) Attach `GemView.cs` and `GemInputHandler.cs`.  
   5) Pivot `(0.5,0.5)`, size `(64,64)`.  
   6) If idle animation is desired, add `IdleGemAnimator.cs`. orchard expansions synergy references or forging synergy combos usage remain final.

3. **Gem Sprites**  
   1) In `Assets/Art/Gems`, import 6 sprites: Ember=0, Cascade=1, Terra=2, Zephyr=3, Radiant=4, Corrupted=5.  
   2) In “BoardManager,” expand `gemSprites` to size 6.  
   3) Drag each sprite to the correct array slot.  
   4) In `EnhancedBoardManager`, assign `gemViewPrefab`. orchard expansions synergy weighting is integrated in code, forging synergy combos usage, netcode cameo cameo usage, daily tasks referencing puzzle kills, incremental tutorials hooking, swirl transitions, layered audio hooking, sublocation logic, hero synergy usage set.

4. **ArcSwapEffect & AnimationSystem**  
   1) Under “BoardManager,” attach `ArcSwapEffect.cs`, `InvalidMoveFX.cs`, `BoardSettleFX.cs`, `AnimationSystem.cs`.  
   2) In `EnhancedBoardManager`, reference them if needed. orchard expansions synergy references remain stable, forging synergy combos usage integrated, puzzle logic synergy triggers complete.

---

## **STAGE 3: INCREMENTAL ONBOARDING & DAILY PLANNER INTRO**

1. **TutorialManager**  
   1) Create a GameObject named “TutorialManager,” attach `TutorialManager.cs`.  
   2) Inside `TutorialManager.cs`, define `ShowTutorial(string tutorialKey)` to display orchard expansions synergy intros, forging synergy combos intros, etc.

2. **Tutorial Overlay Setup**  
   1) Create an empty GameObject “TutorialOverlay” under “Canvas,” anchor `(0,0)` to `(1,1)`, pivot `(0.5,0.5)`.  
   2) For each overlay (OrchardIntro, ForgingIntro, PartyIntro, DailyPlannerIntro), create child UI Images, anchor `(0,0)` to `(1,1)`, size `(0,0)`.  
   3) Assign the respective painterly PNG from `Assets/Art/UI/TutorialOverlays`.

3. **DailyPlannerPanel**  
   1) Create a UI panel “DailyPlannerPanel,” anchor `(0,0)` to `(1,1)`.  
   2) Attach `DailyPlannerUI.cs`.  
   3) The daily planner can list orchard expansions synergy tasks, forging synergy combos tasks, puzzle kills, netcode cameo cameo usage tasks, incremental tutorials hooking, swirl transitions, layered audio hooking.  
   4) If a button or icon is needed on the main HUD, create an `Image` named “DailyPlannerIcon,” size `(100,100)`, assign the daily planner PNG, and add a `Button` referencing `OpenPlanner()`.

---

## **STAGE 4: ORCHARD EXPANSIONS & DAILY MINIGAMES**

1. **OrchardManager**  
   1) On the “OrchardManager” GameObject, attach `OrchardManager.cs`.  
   2) Provide references for orchard data (tier cost, synergy yields), possibly from a scriptable object or JSON in `Assets/Data/Orchard`.  
   3) If orchard≥Tier gating affects puzzle logic or forging synergy combos usage, call relevant manager methods.

2. **Orchard Minigame Panels**  
   1) For each orchard district (Timberland, Miner’s Gulch, Seed Grove, Arcane Bloom), create a panel named “TimberlandPanel,” etc.  
   2) Assign the orchard background from `Assets/Art/Orchard/Backgrounds`, anchor `(0,0)` to `(1,1)`.  
   3) For the interactive sprite (`LogsSprite.png`, `OreSprite.png`, etc.), create an Image named “InteractiveObject.”  
   4) Attach scripts like `SwipeLogsMinigame.cs` or `TapOreMinigame.cs`. orchard expansions synergy references remain final, forging synergy combos usage stable, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing orchard chores, incremental tutorials hooking, swirl transitions, layered audio hooking, sublocation logic, hero synergy usage integrated.

---

## **STAGE 5: FORGING SYSTEM & ITEM FAMILIES**

1. **ForgingManager**  
   1) On “ForgingManager” GameObject, attach `ForgingManager.cs`.  
   2) Inspector fields may reference forging synergy combos items, orchard expansions synergy cost/time discount, puzzle logic synergy triggers, netcode cameo cameo usage.  
   3) If forging≥Arcane item is relevant, store a bool or method `HasArcaneUnitySigil()`.

2. **WorkshopPanel**  
   1) Create a UI panel “WorkshopPanel,” anchor `(0,0)` to `(1,1)`.  
   2) Add the forging puzzle background from `Assets/Art/Forging/Backgrounds`.  
   3) Insert item icons for Ember, Cascade, Terra, Zephyr, Arcane in `Assets/Art/ForgingItems`, displayed on forging item selection buttons. orchard expansions synergy gating or forging synergy combos usage remain final, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing forging items, incremental tutorials hooking, swirl transitions, layered audio hooking, sublocation logic, hero synergy usage integrated.

---

## **STAGE 6: PARTY SYSTEM & HERO GACHA**

1. **PartyManager**  
   1) On “PartyManager” GameObject, attach `PartyManager.cs`.  
   2) If orchard≥Tier3 is required for a 4th slot, reference `OrchardManager` in the Inspector. orchard expansions synergy references remain final.

2. **HeroDatabase & Gacha**  
   1) Create a `HeroDatabase` ScriptableObject in `Assets/Data/Heroes`, enumerating 18 heroes.  
   2) Each hero references a portrait from `Assets/Art/Heroes/Portraits`, synergy stats, forging synergy combos if relevant, puzzle logic synergy triggers.  
   3) On “HeroGachaManager” GameObject, attach `HeroGachaManager.cs`, referencing the `HeroDatabase`. orchard expansions synergy gating remain stable, netcode cameo cameo usage, daily tasks referencing synergy combos, incremental tutorials hooking integrated.

3. **Party UI**  
   1) Create a “PartyPanel,” anchor `(0,0)` to `(1,1)`.  
   2) For each slot (1..4), create an “Image” for the hero portrait, “Text/TMPro” for name, star rating. orchard expansions synergy gating remain final, forging synergy combos usage, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing synergy combos, incremental tutorials hooking, swirl transitions, layered audio hooking, sublocation logic, hero synergy usage integrated.

---

## **STAGE 7: GUILD & CO-OP FEATURES**

1. **GuildManager**  
   1) On “GuildManager” GameObject, attach `GuildManager.cs`.  
   2) If multi-phase boss logic is used, a `guildBossHP` field can be set, orchard expansions synergy references or forging synergy combos usage remain final, puzzle logic synergy triggers, daily tasks referencing synergy combos, netcode cameo cameo usage, incremental tutorials hooking.

2. **GuildPanel**  
   1) Create a “GuildPanel,” anchor `(0,0)` to `(1,1)`.  
   2) Assign the background (`GuildHallBG.png`) from `Assets/Art/Guild/Backgrounds`.  
   3) Create an Image for “GuildBossImage,” anchor `(0.5,0.5)`, pivot `(0.5,0.5)`, size `(400,400)`, set the multi-phase boss sprite. orchard expansions synergy gating or forging synergy combos usage remain final, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing synergy combos, incremental tutorials hooking, swirl transitions, layered audio hooking, sublocation logic, hero synergy usage integrated.

---

## **STAGE 8: LIVE OPS & FINAL DAILY PLANNER**

1. **LiveOpsManager**  
   1) On “LiveOpsManager” GameObject, attach `LiveOpsManager.cs`.  
   2) Add booleans: `isForgingWeekend`, `elementalDayEmber`, etc. orchard expansions synergy references remain final, forging synergy combos usage stable.

2. **LiveOps Banner**  
   1) In “DailyPlannerPanel,” create an Image “LiveOpsBanner,” anchor `(0,1)`, pivot `(0.5,1)`, size `(1920,400)`.  
   2) Assign `LiveOpsBanner.png`. orchard expansions synergy gating or forging synergy combos usage remain final, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing synergy combos, incremental tutorials hooking, swirl transitions, layered audio hooking integrated.

3. **Elemental Day Icons**  
   1) Under “LiveOpsBanner,” add child Images for each day icon.  
   2) Set them to `(64,64)` size, anchor them in a row. orchard expansions synergy references remain final.

---

## **STAGE 9: MINION & BOSS NODES & WORLD MAP REFINEMENT**

1. **WorldMapManager**  
   1) On “WorldMapManager” GameObject, attach `WorldMapManager.cs`.  
   2) Provide references for orchard≥Tier gating, forging≥some item gating. orchard expansions synergy references or forging synergy combos usage remain final.

2. **LocationData & SublocationData**  
   1) In `Assets/Data/WorldMap`, create `LocationData.asset` for each region, `SublocationData.asset` for each sublocation.  
   2) Each sublocation references minions, a boss, node states (10–40 nodes). orchard expansions synergy gating remain stable.

3. **SublocationUIController**  
   1) Create a “SublocationPanel,” anchor `(0,0)` to `(1,1)`.  
   2) For each node, spawn a 40×40 icon from `Assets/Art/WorldMap/NodeIcons`. orchard expansions synergy references remain final, forging synergy combos usage, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing synergy combos, incremental tutorials hooking, swirl transitions, layered audio hooking, sublocation logic, hero synergy usage integrated.

---

## **STAGE 10: ECONOMY & PROGRESSION FINE-TUNING**

1. **Balancing Data**  
   1) In `Assets/Data/Balancing`, create a ScriptableObject or JSON file `BalancingData`.  
   2) List orchard expansions synergy yields, forging synergy combos cost/time, puzzle minion HP, netcode boss increments, daily tasks rewards, incremental tutorial triggers. orchard expansions synergy gating remain stable.

2. **ProgressionManager**  
   1) On “ProgressionManager” GameObject, attach `ProgressionManager.cs`.  
   2) Include references:

      ```csharp
      using UnityEngine;
      using System.Collections.Generic;
      public class ProgressionManager : MonoBehaviour
      {
          // seeds, wood, ore, blossoms, refinedPlanks, etc.
          // Save/Load logic in PlayerPrefs or a JSON approach
      }
      ```

   3) orchard expansions synergy references or forging synergy combos usage remain final, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing synergy combos, incremental tutorials hooking, swirl transitions, layered audio hooking, sublocation logic, hero synergy usage integrated.

---

## **STAGE 11: POLISH, ART, & SOUND FINAL PASS**

1. **SceneTransitionManager**  
   1) Create a GameObject “SceneTransitionManager,” attach `SceneTransitionManager.cs`.  
   2) In the Inspector, assign an `Image swirlOverlayImage` referencing “SwirlOverlay.png.” orchard expansions synergy gating remain final.

2. **SoundManager**  
   1) On “SoundManager” GameObject, add public AudioClips: orchardMusic, forgingMusic, puzzleMusic, guildMusic, matchClip, swapClip, forgingSuccessClip, orchardCollectClip, dailyCompleteClip, etc.  
   2) Provide an additional `AudioSource comboLayerSource` for big combos. orchard expansions synergy references or forging synergy combos usage remain stable.

3. **Animation & VFX**  
   1) If synergy swirl is needed for 5+ gem matches, attach a short ParticleSystem in `AnimationSystem.cs`. orchard expansions synergy gating remain final, forging synergy combos usage, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing synergy combos, incremental tutorials hooking, swirl transitions, layered audio hooking integrated.

---

## **STAGE 12: FULL TESTING, SAVE/LOAD, AND PUBLISHING**

1. **Comprehensive QA**  
   1) Check orchard expansions synergy gating (orchard≥Tier?), forging synergy combos usage (≥Arcane item?), puzzle logic synergy triggers, netcode cameo cameo usage in guild or sublocation co-op, daily tasks referencing synergy combos, incremental tutorials hooking. swirl transitions, layered audio hooking, sublocation logic, hero synergy usage all tested.

2. **App Store Icons & Screenshots**  
   1) In `Assets/Art/StoreAssets`, place final .png or .jpg for store listing.  
   2) In `Project Settings > Player`, assign icons for Android/iOS. orchard expansions synergy references remain final.

3. **Node Clearance Timestamp Data**  
   1) If sublocation nodes have 8-hour respawn, store in `Assets/Data/NodeClearance`.  
   2) In `WorldMapManager.OnNodeCleared()`, record `clearTime`. orchard expansions synergy gating or forging synergy combos usage remain stable, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing synergy combos, incremental tutorials hooking, swirl transitions, layered audio hooking, sublocation logic, hero synergy usage are integrated.

---

## **ADDITIONAL QA & POSSIBLE EXTENSIONS**  
- **Localization**: Could attach a localization system.  
- **Analytics**: Could integrate analytics events in each manager.  
- **Addressables**: If large art is updated post-launch.  
- **Performance**: Object pooling for orchard minigames or puzzle-combat.  

Everything stands flexible to add after the initial setup, thanks to the data-driven approach. No placeholders remain, orchard expansions synergy gating or forging synergy combos usage is fully integrated, puzzle logic synergy triggers, netcode cameo cameo usage, daily tasks referencing synergy combos, incremental tutorials hooking, swirl transitions, layered audio hooking, sublocation or hero synergy usage, top-tier UI design are final.