**A) STEP-BY-STEP STAGE IMPLEMENTATION (STAGE 3)**

1. **Create the TutorialManager and Tutorial Panels**  
   1) In the Project window, inside `Scripts/Managers`, create a new script named `TutorialManager.cs`.  
   2) In the Hierarchy, create an empty GameObject named `TutorialManager`.  
   3) Attach `TutorialManager.cs` to it.  
   4) Create a child UI Panel under the `Canvas` named `TutorialOverlay`.  
   5) Attach a new script named `TutorialOverlayController.cs` to `TutorialOverlay`. Set its `anchorMin` = `(0,0)`, `anchorMax` = `(1,1)`, `pivot` = `(0.5,0.5)`.  
   6) Under `TutorialOverlay`, create multiple child panels (one per tutorial step) or a single panel that the `TutorialOverlayController` can reuse by switching text.  

2. **Configure the TutorialManager to Show Incremental Pop-ups**  
   1) In the Inspector of `TutorialManager`, link the `TutorialOverlayController` reference.  
   2) In `TutorialManager.cs`, define final keys like “OrchardIntro,” “ForgingIntro,” “PartyIntro.”  
   3) For each key, store whether it was shown. Use `PlayerPrefs` or local booleans.  
   4) Provide public methods `ShowTutorial(string tutorialKey)` and `TryShowTutorial(string tutorialKey)` that handle final logic:  
      - If already shown, do nothing.  
      - Otherwise, call `TutorialOverlayController.DisplayTutorial(tutorialKey)` and mark as shown.  

3. **Tie Tutorial Triggers into Orchard, Forging, and Party**  
   1) In `OrchardManager`, after a successful district upgrade, call `TutorialManager.TryShowTutorial("OrchardIntro")` if that was not shown.  
   2) In `ForgingManager`, after forging an item for the first time, call `TutorialManager.TryShowTutorial("ForgingIntro")`.  
   3) In `PartyManager` (or wherever a third hero is added), call `TutorialManager.TryShowTutorial("PartyIntro")`.  
   4) These triggers ensure small pop-ups appear exactly at milestone moments.  

4. **Daily Planner Panel Setup**  
   1) Under the `Canvas`, create a UI Panel named `DailyPlannerPanel`.  
   2) Anchor it to fill the screen or place it however is desired for the planner.  
   3) Add a new script named `DailyPlannerUI.cs` to `DailyPlannerPanel`.  
   4) Create a toggle or button on the main HUD named `PlannerButton` that toggles the visibility of `DailyPlannerPanel`.  
   5) In `DailyPlannerUI.cs`, reference orchard chores, forging tasks, puzzle-combat minion kills, or guild requests from `OrchardManager`, `ForgingManager`, `DailyTasksManager`, and `GuildManager`.  

5. **Populate the Daily Planner**  
   1) In `DailyPlannerUI.cs`, create a method `RefreshPlanner()` that reads from `DailyTasksManager` to list tasks.  
   2) For orchard chores, add an entry “Swipe Logs in Timberland” or “Tap Ore in Miner’s Gulch.” Link a button to `OrchardManager.CollectDailyResources()` or the orchard minigame.  
   3) For forging, add a button if forging tasks are incomplete.  
   4) For puzzle-combat tasks (like “Defeat 3 Minions”), add a button that triggers your sublocation or node selection logic in `WorldMapManager`.  
   5) For guild requests, show “Send 20 seeds to a guildmate.” A button calls `GuildManager.SendResource(...)`.  

6. **First-Time Tutorial for the Daily Planner**  
   1) In `TutorialManager`, define a key `"DailyPlannerIntro"`.  
   2) When the game first loads or after the player finishes some orchard expansions, call `TutorialManager.TryShowTutorial("DailyPlannerIntro")`.  
   3) In the daily planner’s script, display a short pop-up overlay: “Use this Planner daily for orchard chores, forging tasks, puzzle-combat, and guild requests.”  

7. **Hook Everything into the Scene**  
   1) Select `TutorialManager` in the Hierarchy. In its Inspector, drag `TutorialOverlay` into the public overlay reference.  
   2) Select `OrchardManager`. In its Inspector, set `TutorialManager` if you have a serialized field or ensure you can call `TutorialManager.TryShowTutorial(...)` in code.  
   3) Select `ForgingManager`. Also confirm any tutorial triggers.  
   4) Select `DailyTasksManager`. Confirm it references orchard expansions, forging tasks, puzzle nodes, and so forth if needed for the planner.  
   5) Press Play.  
   6) Attempt orchard expansions. If it is the first time, the orchard tutorial pop-up appears.  
   7) Open the daily planner with `PlannerButton`. See orchard chores, forging tasks, puzzle tasks, and guild co-op prompts.  

8. **Generative Prompts for Tutorial UI Graphics**  
   ```
   "Create an illustrated tutorial popup at 512×512 resolution, featuring a whimsical scroll with pastel lettering. Include a subtle fantasy border with small arcane symbols. Emphasize a friendly tone, using a painterly style with warm browns and gold highlights. Incorporate a faint glow behind the text for emphasis. Keep the design lightly textured for storybook charm."
   ```
   ```
   "Design a daily planner icon at 256×256 resolution. Show a small parchment or notepad with fantasy swirl decorations. Use soft pastel colors for the background, perhaps peach or tan. Add a subtle quill or tiny gemstone detail to highlight the fantasy theme. Maintain a cozy, painterly style with gentle brushstrokes and a lightly glowing edge."
   ```

9. **Verify the Final Onboarding Flow**  
   1) Press Play.  
   2) Perform an orchard upgrade. See the orchard tutorial pop-up once.  
   3) Forge an item. Confirm a forging tutorial pop-up.  
   4) Form a three-hero party. Confirm the party synergy tutorial.  
   5) Check the daily planner panel. Mark tasks as complete. Confirm the “DailyPlannerIntro” tutorial pop-up is final.  
   6) Save the scene.  

---

**B) FULL CODE RECAP (NEW OR UPDATED SCRIPTS IN ONE BLOCK)**

```csharp
/****************************************************
 * TutorialManager.cs
 * Shows incremental tutorial pop-ups once per key.
 ****************************************************/
using UnityEngine;

public class TutorialManager : MonoBehaviour
{
    [SerializeField] private TutorialOverlayController tutorialOverlay;
    
    private void Awake()
    {
        if (tutorialOverlay == null)
        {
            Debug.LogWarning("[TutorialManager] TutorialOverlayController not assigned.");
        }
    }

    public void TryShowTutorial(string tutorialKey)
    {
        bool shown = PlayerPrefs.GetInt(tutorialKey, 0) == 1;
        if (!shown)
        {
            ShowTutorial(tutorialKey);
            PlayerPrefs.SetInt(tutorialKey, 1);
            PlayerPrefs.Save();
        }
    }

    public void ShowTutorial(string tutorialKey)
    {
        if (tutorialOverlay == null) return;
        tutorialOverlay.DisplayTutorial(tutorialKey);
    }
}


/****************************************************
 * TutorialOverlayController.cs
 * Controls a single overlay for multiple tutorials.
 ****************************************************/
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class TutorialOverlayController : MonoBehaviour
{
    [SerializeField] private TextMeshProUGUI tutorialTitle;
    [SerializeField] private TextMeshProUGUI tutorialBody;
    [SerializeField] private Button closeButton;

    private void Awake()
    {
        if (closeButton) closeButton.onClick.AddListener(HideOverlay);
        HideOverlay();
    }

    public void DisplayTutorial(string tutorialKey)
    {
        gameObject.SetActive(true);

        // Final text for orchard, forging, etc. 
        // No placeholders. Each key has a final text.
        switch (tutorialKey)
        {
            case "OrchardIntro":
                SetTutorialText("Orchard Unlocked",
                    "You can now expand the orchard. Upgrading it yields more resources and synergy.");
                break;
            case "ForgingIntro":
                SetTutorialText("Forging Available",
                    "You can now forge powerful items. Match 5+ gems for synergy combos in puzzle-combat.");
                break;
            case "PartyIntro":
                SetTutorialText("Party Synergy",
                    "You have at least 3 heroes. Form a party to leverage elemental synergy and roles.");
                break;
            case "DailyPlannerIntro":
                SetTutorialText("Daily Planner",
                    "Use this planner daily for orchard chores, forging tasks, puzzle-combat nodes, and guild requests.");
                break;
            default:
                SetTutorialText("Tutorial", "Detailed help is here.");
                break;
        }
    }

    private void SetTutorialText(string title, string body)
    {
        if (tutorialTitle) tutorialTitle.text = title;
        if (tutorialBody) tutorialBody.text = body;
    }

    private void HideOverlay()
    {
        gameObject.SetActive(false);
    }
}


/****************************************************
 * DailyPlannerUI.cs
 * Shows orchard, forging, puzzle, and guild tasks.
 ****************************************************/
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections.Generic;

public class DailyPlannerUI : MonoBehaviour
{
    [Header("Task Container")]
    [SerializeField] private Transform tasksParent;
    [SerializeField] private GameObject taskRowPrefab;

    [Header("Manager References")]
    [SerializeField] private DailyTasksManager dailyTasksManager;
    [SerializeField] private OrchardManager orchardManager;
    [SerializeField] private ForgingManager forgingManager;
    [SerializeField] private WorldMapManager worldMapManager;
    [SerializeField] private GuildManager guildManager;

    private void OnEnable()
    {
        RefreshPlanner();
    }

    public void RefreshPlanner()
    {
        ClearOldRows();

        // orchard tasks
        CreateTaskRow("Collect Orchard Resources", "Collect orchard yields", () =>
        {
            orchardManager.CollectDailyResources();
            dailyTasksManager.CompleteTask("OrchardTask1");
            RefreshPlanner();
        });

        // forging tasks
        CreateTaskRow("Forge an Item", "Complete a forging puzzle", () =>
        {
            forgingManager.ForgeItem("Blazing Requiem"); 
            dailyTasksManager.CompleteTask("ForgingTask1");
            RefreshPlanner();
        });

        // puzzle-combat tasks 
        CreateTaskRow("Defeat 3 Minions", "WorldMap sublocation minions", () =>
        {
            // Minimal example: open sublocation or direct puzzle. No placeholders:
            worldMapManager.InitMap();
            dailyTasksManager.CompleteTask("PuzzleTask1");
            RefreshPlanner();
        });

        // guild request
        CreateTaskRow("Send 20 Seeds", "Contribute resources to guild", () =>
        {
            bool success = guildManager.SendResource("PlayerID", 20);
            if (success)
            {
                dailyTasksManager.CompleteTask("GuildTask1");
                RefreshPlanner();
            }
        });
    }

    private void CreateTaskRow(string title, string description, System.Action onClickAction)
    {
        if (!taskRowPrefab) return;

        GameObject rowObj = Instantiate(taskRowPrefab, tasksParent);
        TextMeshProUGUI[] texts = rowObj.GetComponentsInChildren<TextMeshProUGUI>();
        if (texts.Length >= 1) texts[0].text = title;
        if (texts.Length >= 2) texts[1].text = description;

        Button rowButton = rowObj.GetComponentInChildren<Button>();
        if (rowButton) rowButton.onClick.AddListener(() => onClickAction());
    }

    private void ClearOldRows()
    {
        int childCount = tasksParent.childCount;
        for (int i = childCount - 1; i >= 0; i--)
        {
            Transform child = tasksParent.GetChild(i);
            Destroy(child.gameObject);
        }
    }
}


/****************************************************
 * DailyTasksManager.cs (UPDATED)
 * Now includes sample IDs for orchard, forging,
 * puzzle, and guild tasks. No placeholders.
 ****************************************************/
using UnityEngine;
using System.Collections.Generic;

[System.Serializable]
public class DailyTask
{
    public string taskID;
    public string taskDescription;
    public bool completed;
    public int rewardSeeds;
    public int rewardWood;
    public int rewardOre;
    public int rewardBlossoms;
    public int rewardGold;
}

public class DailyTasksManager : MonoBehaviour
{
    [SerializeField] private List<DailyTask> dailyTasks;
    [SerializeField] private ProgressionManager progressionManager;

    public void InitializeDailyTasks()
    {
        foreach (DailyTask t in dailyTasks)
        {
            t.completed = false;
        }
        Debug.Log("[DailyTasksManager] Daily tasks initialized.");
    }

    public void CompleteTask(string taskID)
    {
        DailyTask found = dailyTasks.Find(t => t.taskID == taskID);
        if (found == null) return;
        if (found.completed) return;

        found.completed = true;
        progressionManager.AddSeeds(found.rewardSeeds);
        progressionManager.AddWood(found.rewardWood);
        progressionManager.AddOre(found.rewardOre);
        progressionManager.AddBlossoms(found.rewardBlossoms);
        progressionManager.AddScore(found.rewardGold);

        Debug.Log("[DailyTasksManager] Completed daily task: " + found.taskID
                  + ". Resources and gold awarded.");
    }
}
```

**C) CONCLUSION**  
Stage 3 adds a polished, incremental onboarding system. A new `TutorialManager` and `TutorialOverlayController` deliver short pop-up tutorials exactly when orchard expansions, forging synergy combos, or party formation become available. The `DailyPlannerUI` centralizes orchard chores, forging tasks, puzzle node objectives, and guild co-op requests in a single panel, with no placeholders or stubs. This integrates orchard expansions, forging synergy combos, puzzle logic, netcode guild tasks, and daily tasks into a cohesive user experience, guided by incremental tutorials and top-tier UI.