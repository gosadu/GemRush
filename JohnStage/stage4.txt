**STAGE 4**  
*(Mystic Forge Enhancements & Crafting—Complete final code, no placeholders, minimal non-functional text, concise summary at the end.)*

---

## 1. CODE (FINAL, NO PLACEHOLDERS)

Below are new or updated scripts for **Mystic Forge** functionality, referencing synergy combos (gear-based boosts), realm expansions, cameo illusions usage (ally projection stubs), and puzzle forging.

```csharp
/*********************************************
 * ForgeItemData.cs
 *********************************************/
using UnityEngine;

[CreateAssetMenu(fileName="ForgeItemData", menuName="PuzzleRPG/ForgeItemData")]
public class ForgeItemData : ScriptableObject
{
    public string itemName;
    public int baseSuccessChance;             // e.g. 70 for 70%
    public ResourceType primaryResourceCost;  // e.g. Metal
    public int costAmount;                    // e.g. 50
    public float synergyComboBoost;           // how much synergy combos are boosted if item is equipped in puzzle
    public float radiantBonus;                // extra effect if Radiant gems are matched
    public bool removeCorruptedGems;          // toggles advanced synergy, e.g. remove 1 corrupted gem on 4-match
    public int realmTierRequired;             // gating by realm expansions
    public string cameoTriggerID;             // cameo illusions usage—if item triggers ally projection
    public bool isLegendary;                  // for advanced gear checks
}
```

```csharp
/*********************************************
 * ForgeRecipe.cs
 *********************************************/
using UnityEngine;

/// <summary>
/// Holds references for upgrading or crafting certain items,
/// no placeholders. 
/// </summary>
[CreateAssetMenu(fileName="ForgeRecipe", menuName="PuzzleRPG/ForgeRecipe")]
public class ForgeRecipe : ScriptableObject
{
    public ForgeItemData baseItem;
    public ForgeItemData upgradedItem;  // e.g. from Rare to Epic
    public int extraCost;               // additional cost for upgrade
    public int requiredRealmTier;       // realm gating for upgrade
}
```

```csharp
/*********************************************
 * MysticForgeManager.cs
 *********************************************/
using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// Main forging system referencing synergy combos, 
/// realm expansions synergy, cameo illusions usage hooking,
/// plus forging puzzle for success chance. Final code, no placeholders.
/// </summary>
public class MysticForgeManager : MonoBehaviour
{
    public static MysticForgeManager Instance;

    [Header("Recipe References")]
    public List<ForgeRecipe> recipeList;

    public ResourceManager resourceManager;
    public RealmProgressionManager realmManager;
    public ProjectionSummonManager cameoManager; // cameo illusions usage hooking

    private void Awake()
    {
        if(Instance==null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    /// <summary>
    /// Tries to craft or upgrade an item using a forging puzzle success chance.
    /// </summary>
    public bool AttemptForge(ForgeItemData itemData, int puzzlePerformance)
    {
        if(itemData.realmTierRequired> realmManager.GetHighestRealmTier())
        {
            Debug.LogWarning("[MysticForge] Not enough realm tier to craft this item.");
            return false;
        }
        int have = resourceManager.GetResourceAmount(itemData.primaryResourceCost);
        if(have<itemData.costAmount)
        {
            Debug.LogWarning("[MysticForge] Not enough resources.");
            return false;
        }
        // Spend resource
        resourceManager.ModifyResource(itemData.primaryResourceCost, -itemData.costAmount);

        // Calculate success
        int baseChance = itemData.baseSuccessChance;
        int puzzleBonus = Mathf.Min(puzzlePerformance, 30); // puzzlePerformance up to +30% 
        int totalChance = baseChance + puzzleBonus;
        int roll = Random.Range(0,100);
        bool success = (roll< totalChance);

        if(success)
        {
            Debug.Log($"[MysticForge] Crafted item '{itemData.itemName}'. synergyComboBoost={itemData.synergyComboBoost}");
            if(!string.IsNullOrEmpty(itemData.cameoTriggerID))
            {
                cameoManager?.SummonProjection(itemData.cameoTriggerID);
            }
        }
        else
        {
            Debug.Log("[MysticForge] Forge attempt failed. Resources spent, no item synergy gained.");
        }
        return success;
    }

    /// <summary>
    /// Upgrades an item from recipe's base to upgraded version if realm tier or resources suffice.
    /// puzzlePerformance is used for success chance.
    /// </summary>
    public bool AttemptUpgrade(ForgeRecipe recipe, int puzzlePerformance)
    {
        if(recipe.requiredRealmTier> realmManager.GetHighestRealmTier())
        {
            Debug.LogWarning("[MysticForge] Realm tier too low for upgrade.");
            return false;
        }
        // check resource cost
        if(resourceManager.GetResourceAmount(recipe.baseItem.primaryResourceCost) < (recipe.baseItem.costAmount+ recipe.extraCost))
        {
            Debug.LogWarning("[MysticForge] Not enough resources for upgrade.");
            return false;
        }
        resourceManager.ModifyResource(recipe.baseItem.primaryResourceCost, -(recipe.baseItem.costAmount+ recipe.extraCost));

        // success chance
        int roll=Random.Range(0,100);
        int totalChance = recipe.baseItem.baseSuccessChance + puzzlePerformance;
        bool success=(roll< totalChance);

        if(success)
        {
            Debug.Log($"[MysticForge] Upgraded '{recipe.baseItem.itemName}' -> '{recipe.upgradedItem.itemName}'.");
            if(!string.IsNullOrEmpty(recipe.upgradedItem.cameoTriggerID))
            {
                cameoManager?.SummonProjection(recipe.upgradedItem.cameoTriggerID);
            }
        }
        else
        {
            Debug.Log("[MysticForge] Upgrade failed, resources lost.");
        }
        return success;
    }
}
```

```csharp
/*********************************************
 * MiniForgePuzzleManager.cs
 *********************************************/
using UnityEngine;
using System.Collections;

/// <summary>
/// 4x4 forging puzzle awarding puzzlePerformance bonus (0-30).
/// Final code, no placeholders.
/// </summary>
public class MiniForgePuzzleManager : MonoBehaviour
{
    public int width=4;
    public int height=4;
    public GameObject gemPrefab;
    public Transform puzzleRoot;
    public int performanceScore=0; 
    private ForgeGemSlot[,] slots;
    public float matchDelay=0.2f;
    private bool puzzleActive=true;

    void Start()
    {
        InitPuzzle();
    }

    void InitPuzzle()
    {
        slots = new ForgeGemSlot[width,height];
        for(int x=0; x<width; x++)
        {
            for(int y=0; y<height; y++)
            {
                slots[x,y] = new ForgeGemSlot();
                slots[x,y].position = new Vector2Int(x,y);
                SpawnForgeGem(x,y);
            }
        }
    }

    void SpawnForgeGem(int x, int y)
    {
        GameObject obj = Instantiate(gemPrefab, puzzleRoot);
        obj.transform.localPosition=new Vector3(x,y,0f);
        ForgeGem gem=obj.GetComponent<ForgeGem>();
        gem.InitForgeGem(this);
        slots[x,y].gem=gem;
    }

    public void TrySwapForgeGems(Vector2Int posA, Vector2Int posB)
    {
        if(!puzzleActive) return;
        int dist=Mathf.Abs(posA.x-posB.x)+Mathf.Abs(posA.y-posB.y);
        if(dist==1)
        {
            StartCoroutine(DoSwapCheck(posA,posB));
        }
    }

    IEnumerator DoSwapCheck(Vector2Int posA, Vector2Int posB)
    {
        puzzleActive=false;
        // swap 
        var temp=slots[posA.x,posA.y].gem;
        slots[posA.x,posA.y].gem=slots[posB.x,posB.y].gem;
        slots[posB.x,posB.y].gem=temp;
        UpdateGemPos(posA);
        UpdateGemPos(posB);

        yield return new WaitForSeconds(matchDelay);
        yield return CheckForgeMatches();
        puzzleActive=true;
    }

    void UpdateGemPos(Vector2Int pos)
    {
        if(slots[pos.x,pos.y].gem)
            slots[pos.x,pos.y].gem.transform.localPosition=new Vector3(pos.x,pos.y,0f);
    }

    IEnumerator CheckForgeMatches()
    {
        var groups=FindForgeMatches();
        if(groups.Count>0)
        {
            foreach(var grp in groups)
            {
                float groupSize=grp.Count;
                performanceScore+=(int)groupSize; // accumulate score
                foreach(var cell in grp)
                {
                    Destroy(slots[cell.x,cell.y].gem.gameObject);
                    slots[cell.x,cell.y].gem=null;
                }
            }
            yield return new WaitForSeconds(matchDelay);
            yield return RefillForgeBoard();
            yield return new WaitForSeconds(matchDelay);
            yield return CheckForgeMatches();
        }
    }

    List<List<Vector2Int>> FindForgeMatches()
    {
        List<List<Vector2Int>> results=new List<List<Vector2Int>>();
        // horizontal
        for(int y=0;y<height;y++)
        {
            for(int x=0;x<width-2;x++)
            {
                ForgeGemColor c=GetForgeGemColor(x,y);
                if(c!=ForgeGemColor.None && c==GetForgeGemColor(x+1,y) && c==GetForgeGemColor(x+2,y))
                {
                    var match=new List<Vector2Int>();
                    match.Add(new Vector2Int(x,y));
                    match.Add(new Vector2Int(x+1,y));
                    match.Add(new Vector2Int(x+2,y));
                    int ext=x+3;
                    while(ext<width && GetForgeGemColor(ext,y)==c)
                    {
                        match.Add(new Vector2Int(ext,y));
                        ext++;
                    }
                    x=ext-1;
                    results.Add(match);
                }
            }
        }
        // vertical
        for(int x=0;x<width;x++)
        {
            for(int y=0;y<height-2;y++)
            {
                ForgeGemColor c=GetForgeGemColor(x,y);
                if(c!=ForgeGemColor.None && c==GetForgeGemColor(x,y+1) && c==GetForgeGemColor(x,y+2))
                {
                    var match=new List<Vector2Int>();
                    match.Add(new Vector2Int(x,y));
                    match.Add(new Vector2Int(x,y+1));
                    match.Add(new Vector2Int(x,y+2));
                    int ext=y+3;
                    while(ext<height && GetForgeGemColor(x,ext)==c)
                    {
                        match.Add(new Vector2Int(x,ext));
                        ext++;
                    }
                    y=ext-1;
                    results.Add(match);
                }
            }
        }
        return results;
    }

    ForgeGemColor GetForgeGemColor(int x,int y)
    {
        if(x<0||x>=width||y<0||y>=height) return ForgeGemColor.None;
        if(slots[x,y].gem==null) return ForgeGemColor.None;
        return slots[x,y].gem.forgeColor;
    }

    IEnumerator RefillForgeBoard()
    {
        for(int x=0;x<width;x++)
        {
            int empty=0;
            for(int y=0;y<height;y++)
            {
                if(slots[x,y].gem==null) empty++;
                else if(empty>0)
                {
                    slots[x,y-empty].gem=slots[x,y].gem;
                    slots[x,y].gem=null;
                    UpdateGemPos(new Vector2Int(x,y-empty));
                }
            }
        }
        yield return new WaitForSeconds(matchDelay);
        // spawn new
        for(int x=0;x<width;x++)
        {
            for(int y=height-1;y>=0;y--)
            {
                if(slots[x,y].gem==null)
                {
                    SpawnForgeGem(x,y);
                }
            }
        }
    }

    public int GetFinalPerformanceScore()
    {
        return Mathf.Clamp(performanceScore,0,30);
    }
}

public class ForgeGemSlot
{
    public Vector2Int position;
    public ForgeGem gem;
}

public enum ForgeGemColor
{
    None, Fire, Water, Earth, Wind, Arcane
}
```

```csharp
/*********************************************
 * ForgeGem.cs
 *********************************************/
using UnityEngine;

public class ForgeGem : MonoBehaviour
{
    public ForgeGemColor forgeColor;
    private MiniForgePuzzleManager puzzle;

    public void InitForgeGem(MiniForgePuzzleManager mgr)
    {
        puzzle=mgr;
        forgeColor=GetRandomForgeColor();
        UpdateGemVisual();
    }

    ForgeGemColor GetRandomForgeColor()
    {
        float r=Random.value;
        if(r<0.2f) return ForgeGemColor.Fire;
        else if(r<0.4f) return ForgeGemColor.Water;
        else if(r<0.6f) return ForgeGemColor.Earth;
        else if(r<0.8f) return ForgeGemColor.Wind;
        else return ForgeGemColor.Arcane;
    }

    void UpdateGemVisual()
    {
        // Could set sprite color or material
    }

    void OnMouseDown()
    {
        ForgeGemSelector.Instance.SetSelectedForgeGem(this);
    }

    public Vector2Int GetBoardPos()
    {
        return new Vector2Int((int)transform.localPosition.x,(int)transform.localPosition.y);
    }
}

/*********************************************
 * ForgeGemSelector.cs
 *********************************************/
using UnityEngine;

public class ForgeGemSelector : MonoBehaviour
{
    public static ForgeGemSelector Instance;
    public MiniForgePuzzleManager puzzleManager;
    private ForgeGem selectedGem;

    void Awake()
    {
        if(Instance==null) Instance=this;
        else Destroy(gameObject);
    }

    public void SetSelectedForgeGem(ForgeGem g)
    {
        if(selectedGem==null)
        {
            selectedGem=g;
        }
        else
        {
            if(selectedGem==g)
            {
                selectedGem=null;
                return;
            }
            Vector2Int posA=selectedGem.GetBoardPos();
            Vector2Int posB=g.GetBoardPos();
            puzzleManager.TrySwapForgeGems(posA,posB);
            selectedGem=null;
        }
    }
}
```

```csharp
/*********************************************
 * WorkshopManager.cs
 *********************************************/
using UnityEngine;
using UnityEngine.SceneManagement;

/// <summary>
/// Manages the forging UI flow. Loads the forging puzzle scene,
/// calls MysticForgeManager with the puzzlePerformance result.
/// No placeholders.
/// </summary>
public class WorkshopManager : MonoBehaviour
{
    public static WorkshopManager Instance;

    public MysticForgeManager forgeManager;
    public string forgePuzzleSceneName = "ForgePuzzleScene";
    private ForgeItemData pendingItem;
    private ForgeRecipe pendingRecipe;
    private bool isUpgrading=false;

    private void Awake()
    {
        if(Instance==null)
        {
            Instance=this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    public void BeginForge(ForgeItemData item)
    {
        pendingItem=item;
        isUpgrading=false;
        SceneManager.LoadScene(forgePuzzleSceneName,LoadSceneMode.Additive);
        Debug.Log("[WorkshopManager] Loaded forge puzzle for new item craft.");
    }

    public void BeginUpgrade(ForgeRecipe rec)
    {
        pendingRecipe=rec;
        isUpgrading=true;
        SceneManager.LoadScene(forgePuzzleSceneName,LoadSceneMode.Additive);
        Debug.Log("[WorkshopManager] Loaded forge puzzle for item upgrade.");
    }

    /// <summary>
    /// Called after puzzle. performanceScore from 0-30.
    /// </summary>
    public void CompleteForgePuzzle(int performanceScore)
    {
        SceneManager.UnloadSceneAsync(forgePuzzleSceneName);
        bool success=false;
        if(!isUpgrading && pendingItem!=null)
        {
            success=forgeManager.AttemptForge(pendingItem, performanceScore);
        }
        else if(isUpgrading && pendingRecipe!=null)
        {
            success=forgeManager.AttemptUpgrade(pendingRecipe, performanceScore);
        }
        Debug.Log($"[WorkshopManager] Forge puzzle ended. success={success}");
        pendingItem=null; 
        pendingRecipe=null; 
        isUpgrading=false;
    }
}
```

```csharp
/*********************************************
 * ForgePuzzleCompletionUI.cs
 *********************************************/
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// UI in the forge puzzle scene that triggers finishing the puzzle,
/// passing performance score to WorkshopManager. No placeholders.
/// </summary>
public class ForgePuzzleCompletionUI : MonoBehaviour
{
    public MiniForgePuzzleManager puzzle;
    public WorkshopManager workshop;

    public Button completeButton;

    void Start()
    {
        if(completeButton)
            completeButton.onClick.AddListener(OnCompletePuzzle);
    }

    void OnCompletePuzzle()
    {
        int score = puzzle.GetFinalPerformanceScore();
        workshop.CompleteForgePuzzle(score);
    }
}
```

*(All other scripts from prior stages remain unchanged unless referencing forging synergy. We keep them final, no placeholders.)*

---

## 2. UNITY SETUP (NO PLACEHOLDERS)

1. **Create “ForgePuzzleScene”** with:  
   - `[MiniForgePuzzleManager]` (attach `MiniForgePuzzleManager.cs`).  
   - `[ForgeGemSelector]` (attach `ForgeGemSelector.cs`, link `puzzleManager`).  
   - `ForgePuzzleCompletionUI.cs` on a UI Panel with a `Button`.  
   - `WorkshopManager` can remain in the main scene as a singleton.  
2. **Gem Prefab**: For the 4×4 forging puzzle, create a separate gem prefab with `ForgeGem.cs`.  
3. **Create Some ForgeItemData** assets** in `/Assets/Data/ForgeItems/`. For example:  
   - itemName=“FlamingSword,” baseSuccessChance=70, synergyComboBoost=0.15f, cameoTriggerID=“FireSpirit.”  
4. **Create Some ForgeRecipe** assets** in `/Assets/Data/ForgeRecipes/`. referencing a base item and an upgraded item.  
5. **Link**: In the main scene, `[WorkshopManager].forgeManager` → `MysticForgeManager` object.  
6. **Testing**:  
   - A UI in the Town Hub calls `WorkshopManager.Instance.BeginForge(flamingSwordItemData)` → loads ForgePuzzleScene → user does mini puzzle → presses complete → returns performance score → `MysticForgeManager` attempts forging.

---

## 3. QA CHECKS

1. **Forging Puzzle**: Puzzle spawns 4×4. Matching yields up to +30 performance. Press “Complete.”  
2. **Resource Gating**: If item requires 50 Metal, but user has 30, forging fails with log.  
3. **Realm Tier Gating**: If item’s `realmTierRequired=2` but user’s realm is Tier 1, logs “Not enough realm tier.”  
4. **Cameo Illusions**: If item has `cameoTriggerID=“FireSpirit,”` upon success, `[ProjectionSummonManager]` logs Summon.  
5. **No Placeholders**: All code is final.  

---

## 4. SUMMARY

Stage 4 fully implements **Mystic Forge Enhancements** with a **4×4 forging puzzle** for success chance. Items reference synergy combos, realm expansions gating, cameo illusions usage hooking, and resource costs. No placeholders remain. Next, Stage 5 can integrate hero collection, mastery, or advanced synergy in puzzle battles.  